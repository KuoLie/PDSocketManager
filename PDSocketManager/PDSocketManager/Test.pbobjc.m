// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: test.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers_RuntimeSupport.h>
#else
 #import "GPBProtocolBuffers_RuntimeSupport.h"
#endif

 #import "Test.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"

#pragma mark - TestRoot

@implementation TestRoot

// No extensions in the file and no imports, so no need to generate
// +extensionRegistry.

@end

#pragma mark - TestRoot_FileDescriptor

static GPBFileDescriptor *TestRoot_FileDescriptor(void) {
  // This is called by +initialize so there is no need to worry
  // about thread safety of the singleton.
  static GPBFileDescriptor *descriptor = NULL;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    descriptor = [[GPBFileDescriptor alloc] initWithPackage:@""
                                                     syntax:GPBFileSyntaxProto3];
  }
  return descriptor;
}

#pragma mark - Enum Commands

GPBEnumDescriptor *Commands_EnumDescriptor(void) {
  static GPBEnumDescriptor *descriptor = NULL;
  if (!descriptor) {
    static const char *valueNames =
        "Request\000Reply\000Update\000";
    static const int32_t values[] = {
        Commands_Request,
        Commands_Reply,
        Commands_Update,
    };
    static const char *extraTextFormatInfo = "\003\000\007\000\001\005\000\002\006\000";
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(Commands)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:Commands_IsValidValue
                              extraTextFormatInfo:extraTextFormatInfo];
    if (!OSAtomicCompareAndSwapPtrBarrier(nil, worker, (void * volatile *)&descriptor)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL Commands_IsValidValue(int32_t value__) {
  switch (value__) {
    case Commands_Request:
    case Commands_Reply:
    case Commands_Update:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - GetUser

@implementation GetUser

@dynamic command;
@dynamic openid;

typedef struct GetUser__storage_ {
  uint32_t _has_storage_[1];
  Commands command;
  NSString *openid;
} GetUser__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "command",
        .dataTypeSpecific.enumDescFunc = Commands_EnumDescriptor,
        .number = GetUser_FieldNumber_Command,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(GetUser__storage_, command),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "openid",
        .dataTypeSpecific.className = NULL,
        .number = GetUser_FieldNumber_Openid,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(GetUser__storage_, openid),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[GetUser class]
                                     rootClass:[TestRoot class]
                                          file:TestRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(GetUser__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t GetUser_Command_RawValue(GetUser *message) {
  GPBDescriptor *descriptor = [GetUser descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:GetUser_FieldNumber_Command];
  return GPBGetMessageInt32Field(message, field);
}

void SetGetUser_Command_RawValue(GetUser *message, int32_t value) {
  GPBDescriptor *descriptor = [GetUser descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:GetUser_FieldNumber_Command];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - UserProfile

@implementation UserProfile

@dynamic command;
@dynamic nickname;
@dynamic uid;
@dynamic openid;
@dynamic status;
@dynamic refreshAt;
@dynamic friendsArray, friendsArray_Count;

typedef struct UserProfile__storage_ {
  uint32_t _has_storage_[1];
  Commands command;
  int32_t uid;
  int32_t status;
  float refreshAt;
  NSString *openid;
  NSString *nickname;
  NSMutableArray *friendsArray;
} UserProfile__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "command",
        .dataTypeSpecific.enumDescFunc = Commands_EnumDescriptor,
        .number = UserProfile_FieldNumber_Command,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(UserProfile__storage_, command),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "uid",
        .dataTypeSpecific.className = NULL,
        .number = UserProfile_FieldNumber_Uid,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(UserProfile__storage_, uid),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "openid",
        .dataTypeSpecific.className = NULL,
        .number = UserProfile_FieldNumber_Openid,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(UserProfile__storage_, openid),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "status",
        .dataTypeSpecific.className = NULL,
        .number = UserProfile_FieldNumber_Status,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(UserProfile__storage_, status),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "nickname",
        .dataTypeSpecific.className = NULL,
        .number = UserProfile_FieldNumber_Nickname,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(UserProfile__storage_, nickname),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "refreshAt",
        .dataTypeSpecific.className = NULL,
        .number = UserProfile_FieldNumber_RefreshAt,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(UserProfile__storage_, refreshAt),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeFloat,
      },
      {
        .name = "friendsArray",
        .dataTypeSpecific.className = GPBStringifySymbol(UserProfile),
        .number = UserProfile_FieldNumber_FriendsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(UserProfile__storage_, friendsArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[UserProfile class]
                                     rootClass:[TestRoot class]
                                          file:TestRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(UserProfile__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t UserProfile_Command_RawValue(UserProfile *message) {
  GPBDescriptor *descriptor = [UserProfile descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:UserProfile_FieldNumber_Command];
  return GPBGetMessageInt32Field(message, field);
}

void SetUserProfile_Command_RawValue(UserProfile *message, int32_t value) {
  GPBDescriptor *descriptor = [UserProfile descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:UserProfile_FieldNumber_Command];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}


#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
